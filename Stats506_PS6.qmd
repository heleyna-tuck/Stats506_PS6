---
title: "Stats506_PS6"
author: "Heleyna Tucker"
format:
  html:
    embed-resources: true
editor: visual
---

GitHub Repo: https://github.com/heleyna-tuck/Stats506_PS6

# Stratified Bootstrapping

Use the `flights` data from the **nycflights13** package. Use stratified bootstrapping by `dests` to estimate the average `air_time` for flights within each `origin` and produce a table including the estimates and confidence intervals for each `origin`.

### Without Parallel Processing

Load in needed libraries and look at the flights data:

```{r}
library(nycflights13)
library(boot)
library(dplyr)
library(furrr)
head(flights)
```

```{r}

# Define the number of bootstrap samples
num_samples <- 1000

# Create a function to perform stratified bootstrapping
#' Caluclate the mean air time for each origin
#'
#' @param data 
#'
#' @return mean air time
#' @export
#'
#' @examples
stratified_bootstrap <- function(data) {
  # Sample with replacement within each stratum
  bootstrapped_data <- data %>%
    group_by(dest) %>%
    sample_n(size = n(), replace = TRUE) %>%
    ungroup()

  # Calculate mean air_time for each origin
  mean_air_time <- bootstrapped_data %>%
    group_by(origin) %>%
    summarize(mean_air_time = mean(air_time, na.rm = TRUE))

  return(mean_air_time)
}

# Perform stratified bootstrapping for num_samples times
bootstrap_results <- lapply(1:num_samples, function(x) stratified_bootstrap(flights))

# Combine the results into a data frame
bootstrap_df <- do.call(rbind, bootstrap_results)

```

```{r}
# Calculate confidence intervals for each origin
confidence_intervals <- bootstrap_df %>%
  group_by(origin) %>%
  summarize(
    mean_estimate = mean(mean_air_time),
    lower_ci = quantile(mean_air_time, 0.025),
    upper_ci = quantile(mean_air_time, 0.975)
  )

# Print the results
confidence_intervals
```

### Using Parallel Processing:

```{r}
# Set up parallel processing
plan(multisession, workers = 2)  # Adjust the number of workers as needed

# Define the number of bootstrap samples
num_samples <- 1000

# Perform stratified bootstrapping in parallel for num_samples times
bootstrap_results <- future_map_dfr(1:num_samples, ~stratified_bootstrap(flights))

# Calculate confidence intervals for each origin
confidence_intervals <- bootstrap_results %>%
  group_by(origin) %>%
  summarize(
    mean_estimate = mean(mean_air_time),
    lower_ci = quantile(mean_air_time, 0.025),
    upper_ci = quantile(mean_air_time, 0.975)
  )

# Print the results
confidence_intervals
```

### Time Differences:

Run both bootstrapped samples and record the times each take:

```{r}

# Define the number of bootstrap samples
num_samples <- 1000

# Non-parallelized version
start_time_non_parallel <- system.time({
  bootstrap_results_non_parallel <- lapply(1:num_samples, function(x) stratified_bootstrap(flights))
  bootstrap_df_non_parallel <- do.call(rbind, bootstrap_results_non_parallel)
})

# Parallelized version
plan(multisession, workers = 2)  # Adjust the number of workers as needed
start_time_parallel <- system.time({
  bootstrap_results_parallel <- future_map_dfr(1:num_samples, ~stratified_bootstrap(flights))
})
```

```{r}
# Print the results
cat("Non-parallelized version time:", start_time_non_parallel["elapsed"], "\n")
cat("Parallelized version time:", start_time_parallel["elapsed"], "\n")

# Report the performance difference
performance_difference <- start_time_non_parallel["elapsed"] - start_time_parallel["elapsed"]
cat("Performance difference:", performance_difference, "\n")

```

As we can see above, the paralleled version took substatially less time to run compared to the non-parallel version.
